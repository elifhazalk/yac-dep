---
- name: Update yacs-orion
  hosts: firefly
  remote_user: svrn
  vars_files:
    - vault.yml
  gather_facts: no
  vars:
    DIRECTORY: "yacs_orion"
  vars_prompt:
    - name: "version"
      prompt: "Enter version (leave empty for 'latest'):"
      private: no
      default: "latest"

  tasks:
    - name: Create folder
      ansible.builtin.command:
        cmd: "mkdir -p {{ DIRECTORY }}/{{ version }}"
      args:
        creates: "{{ DIRECTORY }}/{{ version }}"

    - name: Download files directly on the target device
      ansible.builtin.get_url:
        url: "ftp://{{ vault.FTP_USER_DEV }}:{{ vault.FTP_PASS_DEV }}@{{ vault.FTP_HOST_DEV }}/{{ DIRECTORY }}/{{ version }}/{{ item.file }}"
        dest: "{{ DIRECTORY }}/{{ version }}/{{ item.file }}"
        mode: "{{ item.mode | default(omit) }}"
      loop:
        - file: setup.sh
          mode: "0755"
        - file: yacs_orion.tar.gz
      loop_control:
        loop_var: item

    - name: Check if the yacs-orchestrator service exists and is active
      command: "systemctl is-active yacs-orchestrator"
      register: service_status
      ignore_errors: yes
      become: true

    - name: Stop the yacs-orchestrator service if it's active and exists
      systemd:
        name: yacs-orchestrator
        state: stopped
      when: service_status.rc == 0 and service_status.stdout == "active"
      become: true

    - name: Execute script with .bashrc sourced
      ansible.builtin.shell:
        cmd: "bash -ic 'source ~/.bashrc && echo ROS2_WS: ${ROS2_WS} && ./setup.sh'"
        chdir: "{{ DIRECTORY }}/{{ version }}"
      args:
        executable: /bin/bash
      become: true
      become_user: svrn
      register: setup_script_output

    - name: Display the setup script output
      debug:
        var: setup_script_output.stdout

    - name: Restart the yacs-orchestrator service
      systemd:
        name: yacs-orchestrator
        state: restarted
      become: true
