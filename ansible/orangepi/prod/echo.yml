- name: Update Echo Service
  hosts: orangepi
  vars_files:
    - vault.yml
  gather_facts: no
  become: yes
  vars:
    DIRECTORY: "yacs_echo"
    SERVICE_NAME: "yacs_echo"

  vars_prompt:
    - name: "version"
      prompt: "Enter version (leave empty for 'latest'):"
      private: no
      default: "latest"

  tasks:
    - name: Kill SoundSimulation process if exists
      ansible.builtin.shell:
        cmd: "pkill -f SoundSimulation || true"
      ignore_errors: yes
    
    - name: Remove yacs_echo directory
      ansible.builtin.file:
        path: "{{ DIRECTORY }}"
        state: absent

    - name: Create folder
      ansible.builtin.command:
        cmd: "mkdir -p {{ DIRECTORY }}"
      args:
        creates: "{{ DIRECTORY }}"

    - name: Download files directly on the target device
      ansible.builtin.get_url:
        url: "ftp://{{ vault.FTP_USER_PROD }}:{{ vault.FTP_PASS_PROD }}@{{ vault.FTP_HOST_PROD }}/{{ DIRECTORY }}/{{ version }}/{{ item.file }}"
        dest: "{{ DIRECTORY }}/{{ item.file }}"
        mode: "{{ item.mode | default(omit) }}"
      loop:
        - file: echo.zip
      loop_control:
        loop_var: item

    - name: Extract zip file
      ansible.builtin.unarchive:
        src: "{{ DIRECTORY }}/echo.zip"
        dest: "{{ DIRECTORY }}"
        remote_src: yes

    - name: Remove zip file
      ansible.builtin.file:
        path: "{{ DIRECTORY }}/echo.zip"
        state: absent

    - name: Check if Poetry is installed
      command: poetry --version
      register: poetry_check
      failed_when: false
      changed_when: false

    - name: Install Poetry globally
      ansible.builtin.pip:
        name: poetry
        state: present
        executable: pip3
      when: poetry_check.rc != 0

    - name: Remove previous Poetry environments
      ansible.builtin.shell:
        cmd: "poetry env list --full-path | xargs -I {} rm -rf {}"
        chdir: "{{ DIRECTORY }}"
      ignore_errors: yes

    - name: Check if the service exists
      command: systemctl status {{ SERVICE_NAME }}
      register: service_status
      ignore_errors: yes
      changed_when: false

    - name: Stop and disable the service
      systemd:
        name: "{{ SERVICE_NAME }}"
        enabled: no
        state: stopped
      when: service_status.rc == 0

    - name: Install dependencies using Poetry
      ansible.builtin.command:
        cmd: "poetry install"
        chdir: "{{ DIRECTORY }}"

    - name: Create service file
      become: yes
      copy:
        dest: "/etc/systemd/system/{{ SERVICE_NAME }}.service"
        owner: root
        group: root
        mode: "0644"
        content: |
          [Unit]
          Description={{ SERVICE_NAME }}

          [Service]
          ExecStart=/usr/local/bin/poetry run python src/yacs_echo/main.py {{ version }}
          WorkingDirectory= /root/{{ DIRECTORY }}
          User=root
          Group=root
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd to make it aware of our service
      become: yes
      systemd:
        daemon_reload: yes

    - name: Ensure the service is running
      become: yes
      systemd:
        name: "{{ SERVICE_NAME }}"
        state: started
        enabled: yes
